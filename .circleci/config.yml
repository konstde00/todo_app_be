# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

executors:
  # A virtual machine environment where the executes. Required to create containers on-demand (Testcontainers)
  # https://www.testcontainers.org/supported_docker_environment/continuous_integration/circle_ci/
  machine-test-executor:
    machine:
      image: ubuntu-2004:2022.10.1
      docker_layer_caching: true
      resource_class: medium
    working_directory: ~/repo
    environment:
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"

orbs:
  aws-cli: circleci/aws-cli@4.1.1
  aws-ecr: circleci/aws-ecr@8.1.2

references:
  gradle_cache_key: &gradle_cache_key
                      v1-dependency-gradle-{{ checksum "build.gradle" }}
  gradle_backup_cache_key: &gradle_backup_cache_key
                             v1-dependency-gradle
  restore_repo: &restore_repo
    restore_cache:
      name: Restoring repo cache
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}
        - v1-repo
  restore_dependencies: &restore_dependencies
    restore_cache:
      name: Restoring gradle dependencies cache
      keys:
        - *gradle_cache_key
        - *gradle_backup_cache_key

commands:
  checkout_code:
    steps:
      - *restore_repo
      - checkout
      - save_cache:
          name: Saving repo cache
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .
  clean_build:
    description: "Build the api jar"
    steps:
      - *restore_dependencies
      - run: gradle dependencies
#      - run: gradle build -x test
      - save_cache:
          name: Saving gradle dependencies cache
          key: *gradle_cache_key
          paths:
            - ~/.gradle
  run_unit_tests:
    description: "Run unit tests"
    steps:
      - run:
          name: "Run unit tests"
          command: |
            echo "Running unit tests"
#          gradle test -Dorg.gradle.jvmargs=-Xmx3g
      - store_test_results:
          path: ./build/test-results/test

  prepare_image_tag: # this tag will be shared among steps
    description: "Builds the image tag and puts it to the workspace"
    steps:
      - run:
          name: Prepare the IMAGE_TAG
          command: |
            mkdir -p /tmp/build-data
            SHORT_GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)
            BRANCH=$(echo "$CIRCLE_BRANCH" | tr / .)
            IMAGE_TAG="v<<pipeline.id>>.$BRANCH.$SHORT_GIT_HASH"
            echo "Image Tag = $IMAGE_TAG"
            echo "export IMAGE_TAG=$IMAGE_TAG" >> ~/.bash_profile
            echo $IMAGE_TAG > ~/image-tag
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV

  prepare_terraform_workspace:
    description: "Sets environment variable for the terraform workspace"
    parameters:
      env:
        type: string
    steps:
      - run:
          name: Prepare TF_WORKSPACE
          command: |
            echo "workspace = <<parameters.env>>"
            echo "export TF_WORKSPACE=<<parameters.env>>" >> $BASH_ENV
  build_and_push_image_to_ecr:
    description: "Build image and push to ECR"
    steps:
      - prepare_image_tag
      - run:
          name: Build and push image to ECR
          command: gradle jib
jobs:
  say-hello:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
          
  tests:
    executor: machine-test-executor
    steps:
      - checkout_code
      - run_unit_tests
      - run:
          name: "Run Integration tests"
          command: |
            echo "Running integration tests"
            ./gradlew integrationTest -i
          no_output_timeout: 40m
      - store_test_results:
          path: ./build/test-results/integrationTest

  build_container:
    docker:
      - image: cimg/openjdk:17.0.8
    steps:
      - checkout_code
      - clean_build
      - run_unit_tests
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: us-east-1
      - setup_remote_docker:
          version: 19.03.13
      - build_and_push_image_to_ecr

  tf_plan:
    resource_class: small
    parameters:
      env:
        type: string
    docker:
      - image: hashicorp/terraform:1.3
    steps:
      - checkout_code
      - prepare_image_tag
      - prepare_terraform_workspace:
          env: <<parameters.env>>
      - run:
          name: Terraform Init
          command: |
            source $BASH_ENV
            cd ./terraform
            terraform init --backend-config="token=${TF_API_KEY}"
      - run:
          name: Terraform Plan
          command: |
            source $BASH_ENV
            cd ./terraform
            cat env/<< parameters.env >>.tfvars > << parameters.env >>.auto.tfvars
            printf '\nimage_tag = "%s"\n' "${IMAGE_TAG}" >> .auto.tfvars
            echo "TF_WORKSPACE=${TF_WORKSPACE}"
            echo "IMAGE_TAG=${IMAGE_TAG}"
            terraform plan

  tf_apply:
    resource_class: small
    parameters:
      env:
        type: string
    docker:
      - image: hashicorp/terraform:1.0.4
    steps:
      - checkout_code
      - prepare_image_tag
      - prepare_terraform_workspace:
          env: <<parameters.env>>
      - run:
          name: Terraform Init
          command: |
            source $BASH_ENV
            cd ./terraform
            echo "TF_WORKSPACE=$TF_WORKSPACE"
            terraform init --backend-config="token=${TF_API_KEY}"
      - run:
          name: Terraform Apply
          command: |
            source $BASH_ENV
            cd ./terraform
            cat env/<< parameters.env >>.tfvars > << parameters.env >>.auto.tfvars
            printf '\nimage_tag = "%s"\n' "$IMAGE_TAG" >> .auto.tfvars
            echo "TF_WORKSPACE=${TF_WORKSPACE}"
            echo "IMAGE_TAG=${IMAGE_TAG}"
            terraform apply -auto-approve

  apply_gateway_prod_changes:
    resource_class: small
    docker:
      - image: cimg/base:2022.03
    steps:
      - run:
          command: |
            curl --location --request POST 'https://app.terraform.io/api/v2/runs' \
            --header 'Content-Type: application/vnd.api+json' \
            --header "Authorization: Bearer ${TF_API_KEY}" \
            --data-raw '{
              "data": {
                "attributes": {
                  "message": "triggered by api",
                  "auto-apply" : true
                },
                "type":"runs",
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "ws-n8jSaecyQbXoZ362"
                    }
                  }
                }
              }
            }
            '
  apply_gateway_staging_changes:
    resource_class: small
    docker:
      - image: cimg/base:2022.03
    steps:
      - run:
          command: |
            curl --location --request POST 'https://app.terraform.io/api/v2/runs' \
            --header 'Content-Type: application/vnd.api+json' \
            --header "Authorization: Bearer ${TF_API_KEY}" \
            --data-raw '{
              "data": {
                "attributes": {
                  "message": "triggered by api",
                  "auto-apply" : true
                },
                "type":"runs",
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "ws-3xn1izsAQYwnRwoT"
                    }
                  }
                }
              }
            }
            '        

workflows:
  version: 2.1

  default_workflow:
    jobs:
      - say-hello

  deploy_staging:
    jobs:
      - hold:
          type: approval
          name: deploy to staging?
      - build_container:
          requires:
            - deploy to staging?
          context:
            - Staging_Context
      - tf_plan:
          name: staging_tf_plan
          env: "todo_app_be_staging"
          requires:
            - build_container
          context:
            - Staging_Context
      - hold:
          type: approval
          name: apply staging terraform?
          requires:
            - staging_tf_plan
      - tf_apply:
          name:
            staging_tf_apply
          requires:
            - apply staging terraform?
          env: "todo_app_be_staging"
          context:
            - Staging_Context
#      - apply_gateway_staging_changes:
#          name: apply_gateway_staging_changes
#          requires:
#            - staging_tf_apply
#          context:
#            - Staging_Context

  deploy_production:
    jobs:
      - hold:
          type: approval
          name: deploy to production?
      - build_container:
          requires:
            - deploy to production?
          context:
            - Prod_Context
      - tf_plan:
          name: prod_tf_plan
          env: "todo_app_be_prod"
          requires:
            - build_container
          context:
            - Prod_Context
      - hold:
          type: approval
          name: apply prod terraform?
          requires:
            - prod_tf_plan
      - tf_apply:
          name:
            prod_tf_apply
          requires:
            - apply prod terraform?
          env: "todo_app_be_prod"
          context:
            - Prod_Context
      - apply_gateway_prod_changes:
          name: apply_gateway_prod_changes
          requires:
            - prod_tf_apply
          context:
            - Prod_Context