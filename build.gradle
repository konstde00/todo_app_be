buildscript {
    ext {
        awsSdkV2 = '2.17.96'
        lombokVersion = '1.18.22'
        streamExVersion = '0.7.3'
        mainClassName = "com.konstde00.todo_app.TodoAppBeApp"
        mapstructVersion = '1.5.3.Final'
        springCloudAws="3.0.1"
        springCloudAwsMessaging="2.4.4"
        awsSdkVersion="2.20.79"
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.openapi.generator"
    id "com.github.node-gradle.node"
    id "org.sonarqube"
    id "com.diffplug.spotless"
    id "io.spring.nohttp"
    id "com.github.andygoossens.gradle-modernizer-plugin"
    id "org.liquibase.gradle"
    id "io.freefair.aspectj" version "5.1.1"
}

group = "com.konstde00.todo_app"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=17
targetCompatibility=17
assert System.properties["java.specification.version"] == "17" || "18" || "19" || "20" || "21"

ext {
    springProfiles = ""
    if (project.hasProperty("tls")) {
        springProfiles += ",tls"
    }
    if (project.hasProperty("e2e")) {
        springProfiles += ",e2e"
    }
}

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"

spotless {
    java {
        target 'src/*/java/**/*.java'
        // removeUnusedImports()
    }
}

apply from: "gradle/swagger.gradle"
apply from: "gradle/cache.gradle"
apply from: "gradle/liquibase.gradle"

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
                srcDirs += ["build/openapi/src/main"]
            }
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "com.konstde00.todo_app.TodoAppBeApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx512m'
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}

task consoleLauncherTest(type: JavaExec) {
    dependsOn(testClasses)
    String cucumberReportsDir = file("$buildDir/reports/tests")
    outputs.dir(reportsDir)
    classpath = sourceSets["test"].runtimeClasspath
    main = "org.junit.platform.console.ConsoleLauncher"
    args("--scan-classpath")
    args("--include-engine", "cucumber")
    args("--reports-dir", cucumberReportsDir)
}

jar.enabled = true
//bootJar.enabled = false


task cucumberTest(type: Test) {
    dependsOn(consoleLauncherTest)
    description = "Execute cucumber BDD tests."
    group = "verification"
    include "**/*CucumberIT*"

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
}

check.dependsOn cucumberTest

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

task integrationTestReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(integrationTest)
}

task cucumberTestReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(cucumberTest)
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

tasks.withType(com.gorylenko.GenerateGitPropertiesTask).configureEach {
  outputs.doNotCacheIf("Task is always executed") { true }
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    // Local maven repository is required for libraries built locally with maven like development jhipster-bom.
    // mavenLocal()
    mavenCentral()
    // jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    // import JHipster dependencies BOM
    if (!project.hasProperty("gae")) {
        implementation platform("tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}")
    }

    compileOnly 'org.projectlombok:lombok:1.18.2'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // https://mvnrepository.com/artifact/org.projectlombok/lombok-mapstruct-binding
    implementation group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'

    implementation group: 'org.mapstruct', name: 'mapstruct', version: mapstructVersion
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapstructVersion

    implementation group: 'com.amazonaws', name: 'aws-java-sdk-ses', version: '1.11.373'
    implementation 'io.awspring.cloud:spring-cloud-aws-autoconfigure:2.4.0'

    implementation "tech.jhipster:jhipster-framework"
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:testcontainers"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api"
    implementation "com.zaxxer:HikariCP"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.aspectj:aspectjrt:1.9.6"
    implementation 'org.springframework:spring-aspects:3.2.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-aop:3.1.4'
    implementation group: 'one.util', name: 'streamex', version: streamExVersion
    implementation 'com.atlassian.oai:swagger-request-validator-core:2.37.0'
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "javax.validation:validation-api:2.0.1.Final"
    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.1.4'
    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
    implementation "org.hibernate.orm:hibernate-core"
    implementation "org.hibernate.validator:hibernate-validator"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    testImplementation "org.testcontainers:jdbc"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'org.springframework:spring-messaging:6.0.13'

    implementation 'javax.persistence:javax.persistence-api:2.2'

    implementation 'com.azure.spring:azure-spring-boot-starter-active-directory:3.11.0'

    implementation "io.awspring.cloud:spring-cloud-aws-starter:$springCloudAws"
    implementation "io.awspring.cloud:spring-cloud-aws-sqs:$springCloudAws"
    implementation "io.awspring.cloud:spring-cloud-aws-messaging:$springCloudAwsMessaging"
    implementation "software.amazon.awssdk:aws-sdk-java:$awsSdkVersion"
    implementation "software.amazon.awssdk:sqs:$awsSdkVersion"

    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.573'
    implementation(platform("software.amazon.awssdk:bom:2.20.56"))

    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.2'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "com.github.ben-manes.caffeine:caffeine"

    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-drive:v3-rev20220815-2.0.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.16.1'

    implementation "org.springframework.security:spring-security-data"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "io.dropwizard.metrics:metrics-core"
    testImplementation "io.cucumber:cucumber-junit-platform-engine"
    testImplementation "io.cucumber:cucumber-java"
    testImplementation "io.cucumber:cucumber-spring"
    testImplementation "org.junit.platform:junit-platform-console"
    testImplementation "org.testng:testng"
    // jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

allprojects {

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'


    group = 'com.konstde00'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_17

    configurations {
        annotationProcessor
        compileOnly.extendsFrom annotationProcessor
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        testImplementation 'org.reflections:reflections:0.10.2'
    }

    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            googleJavaFormat()
        }
    }

    compileJava.dependsOn 'spotlessApply'

    openApiGenerate

    sourceSets{
        main {
            java {
                srcDirs += '$buildDir/openapi/src/main/java'
            }
        }
    }
}

classes.dependsOn("openApiGenerate")

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "8.3"
}

compileJava.dependsOn processResources
compileJava.dependsOn("openApiGenerate")
processResources.dependsOn bootBuildInfo
